// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/healthcheck": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthResponse"
                        }
                    }
                }
            }
        },
        "/api/planets": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "planet"
                ],
                "summary": "find planets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "loadFilms",
                        "name": "loadFilms",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanetsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiError"
                        }
                    }
                }
            }
        },
        "/api/planets/{planetID}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "planet"
                ],
                "summary": "find planet by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Planet ID",
                        "name": "planetID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "loadFilms",
                        "name": "loadFilms",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PlanetResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "planet"
                ],
                "summary": "delete planet",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Planet ID",
                        "name": "planetID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ApiError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "dto.FilmDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2014-12-09 13:50:49"
                },
                "director": {
                    "type": "string",
                    "example": "George Lucas"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "release_date": {
                    "type": "string",
                    "example": "1977-05-25"
                },
                "title": {
                    "type": "string",
                    "example": "A New Hope, Episode 4"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2014-12-20 20:58:18"
                }
            }
        },
        "dto.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "up"
                }
            }
        },
        "dto.PlanetDto": {
            "type": "object",
            "properties": {
                "climates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "arid"
                    ]
                },
                "created_at": {
                    "type": "string",
                    "example": "2014-12-09 13:50:49"
                },
                "films": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FilmDto"
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Tatooine"
                },
                "terrains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "desert"
                    ]
                },
                "updated_at": {
                    "type": "string",
                    "example": "2014-12-20 20:58:18"
                }
            }
        },
        "dto.PlanetResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.PlanetDto"
                }
            }
        },
        "dto.PlanetsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 10
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PlanetDto"
                    }
                },
                "next": {
                    "type": "string",
                    "example": "http://localhost:8080/api/planets?page=3\u0026size=10"
                },
                "previous": {
                    "type": "string",
                    "example": "http://localhost:8080/api/planets?size=10"
                },
                "total": {
                    "type": "integer",
                    "example": 60
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
