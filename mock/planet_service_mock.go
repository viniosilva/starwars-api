// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/viniosilva/starwars-api/internal/service (interfaces: PlanetService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/viniosilva/starwars-api/internal/model"
)

// MockPlanetService is a mock of PlanetService interface.
type MockPlanetService struct {
	ctrl     *gomock.Controller
	recorder *MockPlanetServiceMockRecorder
}

// MockPlanetServiceMockRecorder is the mock recorder for MockPlanetService.
type MockPlanetServiceMockRecorder struct {
	mock *MockPlanetService
}

// NewMockPlanetService creates a new mock instance.
func NewMockPlanetService(ctrl *gomock.Controller) *MockPlanetService {
	mock := &MockPlanetService{ctrl: ctrl}
	mock.recorder = &MockPlanetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanetService) EXPECT() *MockPlanetServiceMockRecorder {
	return m.recorder
}

// CreatePlanets mocks base method.
func (m *MockPlanetService) CreatePlanets(arg0 context.Context, arg1 []*model.Planet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlanets indicates an expected call of CreatePlanets.
func (mr *MockPlanetServiceMockRecorder) CreatePlanets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanets", reflect.TypeOf((*MockPlanetService)(nil).CreatePlanets), arg0, arg1)
}

// CreateRelationshipFilmsToPlanets mocks base method.
func (m *MockPlanetService) CreateRelationshipFilmsToPlanets(arg0 context.Context, arg1 map[int][]int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelationshipFilmsToPlanets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRelationshipFilmsToPlanets indicates an expected call of CreateRelationshipFilmsToPlanets.
func (mr *MockPlanetServiceMockRecorder) CreateRelationshipFilmsToPlanets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelationshipFilmsToPlanets", reflect.TypeOf((*MockPlanetService)(nil).CreateRelationshipFilmsToPlanets), arg0, arg1)
}

// DeletePlanet mocks base method.
func (m *MockPlanetService) DeletePlanet(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlanet indicates an expected call of DeletePlanet.
func (mr *MockPlanetServiceMockRecorder) DeletePlanet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanet", reflect.TypeOf((*MockPlanetService)(nil).DeletePlanet), arg0, arg1)
}

// FindPlanetByID mocks base method.
func (m *MockPlanetService) FindPlanetByID(arg0 context.Context, arg1 int) (*model.Planet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlanetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Planet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlanetByID indicates an expected call of FindPlanetByID.
func (mr *MockPlanetServiceMockRecorder) FindPlanetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlanetByID", reflect.TypeOf((*MockPlanetService)(nil).FindPlanetByID), arg0, arg1)
}

// FindPlanets mocks base method.
func (m *MockPlanetService) FindPlanets(arg0 context.Context, arg1, arg2 int) ([]model.Planet, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlanets", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Planet)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPlanets indicates an expected call of FindPlanets.
func (mr *MockPlanetServiceMockRecorder) FindPlanets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlanets", reflect.TypeOf((*MockPlanetService)(nil).FindPlanets), arg0, arg1, arg2)
}
